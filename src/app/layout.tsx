import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import Header from "@/components/Header";
import CustomCursor from "@/components/CustomCursor";

const PlacardNextCondLt = localFont({
	src: "../../public/assets/fonts/Placard/PlacardNextCondLt.ttf",
	variable: "--font-placardNextCond-light",
});

const PlacardNextCondRg = localFont({
	src: "../../public/assets/fonts/Placard/PlacardNextCondRg.ttf",
	variable: "--font-placardNextCond-regular",
});

const PlacardNextCnMed = localFont({
	src: "../../public/assets/fonts/Placard/PlacardNextCnMed.ttf",
	variable: "--font-placardNextCond-medium",
});

const PlacardNextCnBold = localFont({
	src: "../../public/assets/fonts/Placard/PlacardNextCnBold.ttf",
	variable: "--font-placardNextCond-bold",
});

const PlacardNextBold = localFont({
	src: "../../public/assets/fonts/Placard/PlacardNextBold.ttf",
	variable: "--font-placardNext-bold",
});

const PlacardNextLight = localFont({
	src: "../../public/assets/fonts/Placard/PlacardNextLight.ttf",
	variable: "--font-placardNext-light",
});

const PlacardNextRegular = localFont({
	src: "../../public/assets/fonts/Placard/PlacardNextRegular.ttf",
	variable: "--font-placardNext-regular",
});

const PlacardNextMedium = localFont({
	src: "../../public/assets/fonts/Placard/PlacardNextMedium.ttf",
	variable: "--font-placardNext-medium",
});

export const metadata: Metadata = {
	title: "Create Next App",
	description: "Generated by create next app",
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="en">
			<body
				className={`${PlacardNextCnBold.variable} ${PlacardNextCondLt.variable} ${PlacardNextCnMed.variable} ${PlacardNextCondRg.variable} ${PlacardNextBold.variable} ${PlacardNextLight.variable} ${PlacardNextMedium.variable} ${PlacardNextRegular.variable} antialiased min-h-screen`}
			>
				<CustomCursor />

				<div className="h-screen flex flex-col">
					<Header />
					{children}
				</div>
			</body>
		</html>
	);
}
